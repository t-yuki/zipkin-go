package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetDependenciesParams creates a new GetDependenciesParams object
// with the default values initialized.
func NewGetDependenciesParams() *GetDependenciesParams {
	var ()
	return &GetDependenciesParams{}
}

/*GetDependenciesParams contains all the parameters to send to the API endpoint
for the get dependencies operation typically these are written to a http.Request
*/
type GetDependenciesParams struct {

	/*EndTs
	  only return links from spans where `Span.timestamp`  are at or before
	this time in epoch milliseconds.


	*/
	EndTs int64
	/*Loopback
	  only return links where all Span.timestamp are at or after
	(`endTs - * lookback`) in milliseconds. Defaults to `endTs`, limited
	to a system parameter `QUERY_LOOKBACK`


	*/
	Loopback *string
}

// WithEndTs adds the endTs to the get dependencies params
func (o *GetDependenciesParams) WithEndTs(endTs int64) *GetDependenciesParams {
	o.EndTs = endTs
	return o
}

// WithLoopback adds the loopback to the get dependencies params
func (o *GetDependenciesParams) WithLoopback(loopback *string) *GetDependenciesParams {
	o.Loopback = loopback
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetDependenciesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param endTs
	qrEndTs := o.EndTs
	qEndTs := swag.FormatInt64(qrEndTs)
	if qEndTs != "" {
		if err := r.SetQueryParam("endTs", qEndTs); err != nil {
			return err
		}
	}

	if o.Loopback != nil {

		// query param loopback
		var qrLoopback string
		if o.Loopback != nil {
			qrLoopback = *o.Loopback
		}
		qLoopback := qrLoopback
		if qLoopback != "" {
			if err := r.SetQueryParam("loopback", qLoopback); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
