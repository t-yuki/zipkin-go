package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetTracesParams creates a new GetTracesParams object
// with the default values initialized.
func NewGetTracesParams() *GetTracesParams {
	var (
		limitDefault int64 = int64(10)
	)
	return &GetTracesParams{
		Limit: &limitDefault,
	}
}

/*GetTracesParams contains all the parameters to send to the API endpoint
for the get traces operation typically these are written to a http.Request
*/
type GetTracesParams struct {

	/*AnnotationQuery
	  Ex. `http.uri=/foo and retried` - If key/value (has an `=`),
	constrains against Span.binaryAnnotations of time string. If just
	a word, constrains against Span.annotations. Any values are AND
	against eachother. This means a span in the trace must match all of
	these.


	*/
	AnnotationQuery *string
	/*EndTs
	  Only return traces where all Span.timestamp are at or before this
	time in epoch milliseconds. Defaults to current time.


	*/
	EndTs *string
	/*Limit
	  Maximum number of traces to return. Defaults to 10


	*/
	Limit *int64
	/*Lookback
	  Only return traces where all  Span.timestamp are at or after (endTs
	- * lookback) in milliseconds. Defaults to endTs, limited to a
	system parameter QUERY_LOOKBACK


	*/
	Lookback *string
	/*MaxDuration
	  Only return traces whose Span.duration is less than or equal to
	`maxDuration` microseconds. Only valid with minDuration.


	*/
	MaxDuration *int64
	/*MinDuration
	  Ex. 100000 (for 100ms). Only return traces whose `Span.duration` is
	greater than or equal to minDuration microseconds.


	*/
	MinDuration *int64
	/*ServiceName
	  service name

	*/
	ServiceName string
}

// WithAnnotationQuery adds the annotationQuery to the get traces params
func (o *GetTracesParams) WithAnnotationQuery(annotationQuery *string) *GetTracesParams {
	o.AnnotationQuery = annotationQuery
	return o
}

// WithEndTs adds the endTs to the get traces params
func (o *GetTracesParams) WithEndTs(endTs *string) *GetTracesParams {
	o.EndTs = endTs
	return o
}

// WithLimit adds the limit to the get traces params
func (o *GetTracesParams) WithLimit(limit *int64) *GetTracesParams {
	o.Limit = limit
	return o
}

// WithLookback adds the lookback to the get traces params
func (o *GetTracesParams) WithLookback(lookback *string) *GetTracesParams {
	o.Lookback = lookback
	return o
}

// WithMaxDuration adds the maxDuration to the get traces params
func (o *GetTracesParams) WithMaxDuration(maxDuration *int64) *GetTracesParams {
	o.MaxDuration = maxDuration
	return o
}

// WithMinDuration adds the minDuration to the get traces params
func (o *GetTracesParams) WithMinDuration(minDuration *int64) *GetTracesParams {
	o.MinDuration = minDuration
	return o
}

// WithServiceName adds the serviceName to the get traces params
func (o *GetTracesParams) WithServiceName(serviceName string) *GetTracesParams {
	o.ServiceName = serviceName
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetTracesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.AnnotationQuery != nil {

		// query param annotationQuery
		var qrAnnotationQuery string
		if o.AnnotationQuery != nil {
			qrAnnotationQuery = *o.AnnotationQuery
		}
		qAnnotationQuery := qrAnnotationQuery
		if qAnnotationQuery != "" {
			if err := r.SetQueryParam("annotationQuery", qAnnotationQuery); err != nil {
				return err
			}
		}

	}

	if o.EndTs != nil {

		// query param endTs
		var qrEndTs string
		if o.EndTs != nil {
			qrEndTs = *o.EndTs
		}
		qEndTs := qrEndTs
		if qEndTs != "" {
			if err := r.SetQueryParam("endTs", qEndTs); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Lookback != nil {

		// query param lookback
		var qrLookback string
		if o.Lookback != nil {
			qrLookback = *o.Lookback
		}
		qLookback := qrLookback
		if qLookback != "" {
			if err := r.SetQueryParam("lookback", qLookback); err != nil {
				return err
			}
		}

	}

	if o.MaxDuration != nil {

		// query param maxDuration
		var qrMaxDuration int64
		if o.MaxDuration != nil {
			qrMaxDuration = *o.MaxDuration
		}
		qMaxDuration := swag.FormatInt64(qrMaxDuration)
		if qMaxDuration != "" {
			if err := r.SetQueryParam("maxDuration", qMaxDuration); err != nil {
				return err
			}
		}

	}

	if o.MinDuration != nil {

		// query param minDuration
		var qrMinDuration int64
		if o.MinDuration != nil {
			qrMinDuration = *o.MinDuration
		}
		qMinDuration := swag.FormatInt64(qrMinDuration)
		if qMinDuration != "" {
			if err := r.SetQueryParam("minDuration", qMinDuration); err != nil {
				return err
			}
		}

	}

	// query param serviceName
	qrServiceName := o.ServiceName
	qServiceName := qrServiceName
	if qServiceName != "" {
		if err := r.SetQueryParam("serviceName", qServiceName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
