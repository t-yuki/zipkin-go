package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new operations API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
Returns dependency links derived from spans.

Span names are in lowercase, rpc method for example. Conventionally,
when the span name isn't known, name = "unknown".

*/
func (a *Client) GetDependencies(params *GetDependenciesParams) (*GetDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDependenciesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "GetDependencies",
		Method:      "GET",
		PathPattern: "/dependencies",
		Schemes:     []string{"http", "https"},
		Params:      params,
		Reader:      &GetDependenciesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDependenciesOK), nil
}

/*
Returns a list of all service names associated with annotations.

*/
func (a *Client) GetServices(params *GetServicesParams) (*GetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "GetServices",
		Method:      "GET",
		PathPattern: "/services",
		Schemes:     []string{"http", "https"},
		Params:      params,
		Reader:      &GetServicesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesOK), nil
}

/*
Get all the span names logged by a particular service
*/
func (a *Client) GetSpans(params *GetSpansParams) (*GetSpansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpansParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "GetSpans",
		Method:      "GET",
		PathPattern: "/spans",
		Schemes:     []string{"http", "https"},
		Params:      params,
		Reader:      &GetSpansReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpansOK), nil
}

/*
GetTraceTraceID get trace trace ID API
*/
func (a *Client) GetTraceTraceID(params *GetTraceTraceIDParams) (*GetTraceTraceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTraceTraceIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "GetTraceTraceID",
		Method:      "GET",
		PathPattern: "/trace/{traceId}",
		Schemes:     []string{"http", "https"},
		Params:      params,
		Reader:      &GetTraceTraceIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTraceTraceIDOK), nil
}

/*
Invoking this request retrieves traces matching the below filters.

Results should be filtered against endTs, subject to limit and
lookback. For example, if endTs is 10:20 today, limit is 10, and
lookback is 7 days, traces returned should be those nearest to 10:20
today, not 10:20 a week ago.

Time units of endTs and lookback are milliseconds as opposed to
microseconds, the grain of Span.timestamp. Milliseconds is a more
familiar and supported granularity for query, index and windowing
functions

*/
func (a *Client) GetTraces(params *GetTracesParams) (*GetTracesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTracesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "GetTraces",
		Method:      "GET",
		PathPattern: "/traces",
		Schemes:     []string{"https", "http"},
		Params:      params,
		Reader:      &GetTracesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTracesOK), nil
}

/*
Uploads a list of spans encoded per content-type
*/
func (a *Client) PostSpans(params *PostSpansParams) (*PostSpansAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSpansParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:          "PostSpans",
		Method:      "POST",
		PathPattern: "/spans",
		Schemes:     []string{"http", "https"},
		Params:      params,
		Reader:      &PostSpansReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSpansAccepted), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
