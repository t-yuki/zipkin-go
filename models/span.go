package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*Span Span

swagger:model Span
*/
type Span struct {

	/* ListOfAnnotations
	 */
	Annotations []*Annotation `json:"annotations,omitempty"`

	/* ListOfBinaryAnnotations
	 */
	BinaryAnnotations []*BinaryAnnotation `json:"binaryAnnotations,omitempty"`

	/* Debug debug
	 */
	Debug *bool `json:"debug,omitempty"`

	/* Duration duration
	 */
	Duration *int64 `json:"duration,omitempty"`

	/* ID id
	 */
	ID *string `json:"id,omitempty"`

	/* Name name
	 */
	Name *string `json:"name,omitempty"`

	/* ParentID parent id
	 */
	ParentID *string `json:"parentId,omitempty"`

	/* Timestamp timestamp
	 */
	Timestamp int64 `json:"timestamp,omitempty"`

	/* TraceID trace id
	 */
	TraceID *string `json:"traceId,omitempty"`
}

// Validate validates this span
func (m *Span) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBinaryAnnotations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Span) validateAnnotations(formats strfmt.Registry) error {

	if swag.IsZero(m.Annotations) { // not required
		return nil
	}

	for i := 0; i < len(m.Annotations); i++ {

		if m.Annotations[i] != nil {

			if err := m.Annotations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Span) validateBinaryAnnotations(formats strfmt.Registry) error {

	if swag.IsZero(m.BinaryAnnotations) { // not required
		return nil
	}

	for i := 0; i < len(m.BinaryAnnotations); i++ {

		if m.BinaryAnnotations[i] != nil {

			if err := m.BinaryAnnotations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
