package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetDependenciesParams creates a new GetDependenciesParams object
// with the default values initialized.
func NewGetDependenciesParams() GetDependenciesParams {
	var ()
	return GetDependenciesParams{}
}

// GetDependenciesParams contains all the bound params for the get dependencies operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDependencies
type GetDependenciesParams struct {
	/*only return links from spans where `Span.timestamp`  are at or before
	this time in epoch milliseconds.

	  Required: true
	  In: query
	*/
	EndTs int64
	/*only return links where all Span.timestamp are at or after
	(`endTs - * lookback`) in milliseconds. Defaults to `endTs`, limited
	to a system parameter `QUERY_LOOKBACK`

	  In: query
	*/
	Loopback *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetDependenciesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qEndTs, qhkEndTs, _ := qs.GetOK("endTs")
	if err := o.bindEndTs(qEndTs, qhkEndTs, route.Formats); err != nil {
		res = append(res, err)
	}

	qLoopback, qhkLoopback, _ := qs.GetOK("loopback")
	if err := o.bindLoopback(qLoopback, qhkLoopback, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDependenciesParams) bindEndTs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("endTs", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("endTs", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("endTs", "query", "int64", raw)
	}
	o.EndTs = value

	return nil
}

func (o *GetDependenciesParams) bindLoopback(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Loopback = &raw

	return nil
}
