package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewGetSpansParams creates a new GetSpansParams object
// with the default values initialized.
func NewGetSpansParams() GetSpansParams {
	var ()
	return GetSpansParams{}
}

// GetSpansParams contains all the bound params for the get spans operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSpans
type GetSpansParams struct {
	/*Ex zipkin-web (required) - service that logged an annotation in the
	span.

	  Required: true
	  In: query
	*/
	ServiceName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetSpansParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qServiceName, qhkServiceName, _ := qs.GetOK("serviceName")
	if err := o.bindServiceName(qServiceName, qhkServiceName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSpansParams) bindServiceName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("serviceName", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("serviceName", "query", raw); err != nil {
		return err
	}

	o.ServiceName = raw

	return nil
}
