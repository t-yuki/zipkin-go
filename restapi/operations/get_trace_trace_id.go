package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetTraceTraceIDHandlerFunc turns a function with the right signature into a get trace trace ID handler
type GetTraceTraceIDHandlerFunc func(GetTraceTraceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTraceTraceIDHandlerFunc) Handle(params GetTraceTraceIDParams) middleware.Responder {
	return fn(params)
}

// GetTraceTraceIDHandler interface for that can handle valid get trace trace ID params
type GetTraceTraceIDHandler interface {
	Handle(GetTraceTraceIDParams) middleware.Responder
}

// NewGetTraceTraceID creates a new http.Handler for the get trace trace ID operation
func NewGetTraceTraceID(ctx *middleware.Context, handler GetTraceTraceIDHandler) *GetTraceTraceID {
	return &GetTraceTraceID{Context: ctx, Handler: handler}
}

/*GetTraceTraceID swagger:route GET /trace/{traceId} getTraceTraceId

GetTraceTraceID get trace trace ID API

*/
type GetTraceTraceID struct {
	Context *middleware.Context
	Params  GetTraceTraceIDParams
	Handler GetTraceTraceIDHandler
}

func (o *GetTraceTraceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewGetTraceTraceIDParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
