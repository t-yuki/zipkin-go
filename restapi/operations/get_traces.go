package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetTracesHandlerFunc turns a function with the right signature into a get traces handler
type GetTracesHandlerFunc func(GetTracesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTracesHandlerFunc) Handle(params GetTracesParams) middleware.Responder {
	return fn(params)
}

// GetTracesHandler interface for that can handle valid get traces params
type GetTracesHandler interface {
	Handle(GetTracesParams) middleware.Responder
}

// NewGetTraces creates a new http.Handler for the get traces operation
func NewGetTraces(ctx *middleware.Context, handler GetTracesHandler) *GetTraces {
	return &GetTraces{Context: ctx, Handler: handler}
}

/*GetTraces swagger:route GET /traces getTraces

Invoking this request retrieves traces matching the below filters.

Results should be filtered against endTs, subject to limit and
lookback. For example, if endTs is 10:20 today, limit is 10, and
lookback is 7 days, traces returned should be those nearest to 10:20
today, not 10:20 a week ago.

Time units of endTs and lookback are milliseconds as opposed to
microseconds, the grain of Span.timestamp. Milliseconds is a more
familiar and supported granularity for query, index and windowing
functions


*/
type GetTraces struct {
	Context *middleware.Context
	Params  GetTracesParams
	Handler GetTracesHandler
}

func (o *GetTraces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewGetTracesParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
