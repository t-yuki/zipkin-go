package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetTracesParams creates a new GetTracesParams object
// with the default values initialized.
func NewGetTracesParams() GetTracesParams {
	var (
		limitDefault int64 = int64(10)
	)
	return GetTracesParams{
		Limit: &limitDefault,
	}
}

// GetTracesParams contains all the bound params for the get traces operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetTraces
type GetTracesParams struct {
	/*Ex. `http.uri=/foo and retried` - If key/value (has an `=`),
	constrains against Span.binaryAnnotations of time string. If just
	a word, constrains against Span.annotations. Any values are AND
	against eachother. This means a span in the trace must match all of
	these.

	  In: query
	*/
	AnnotationQuery *string
	/*Only return traces where all Span.timestamp are at or before this
	time in epoch milliseconds. Defaults to current time.

	  In: query
	*/
	EndTs *string
	/*Maximum number of traces to return. Defaults to 10

	  In: query
	  Default: 10
	*/
	Limit *int64
	/*Only return traces where all  Span.timestamp are at or after (endTs
	- * lookback) in milliseconds. Defaults to endTs, limited to a
	system parameter QUERY_LOOKBACK

	  In: query
	*/
	Lookback *string
	/*Only return traces whose Span.duration is less than or equal to
	`maxDuration` microseconds. Only valid with minDuration.

	  In: query
	*/
	MaxDuration *int64
	/*Ex. 100000 (for 100ms). Only return traces whose `Span.duration` is
	greater than or equal to minDuration microseconds.

	  In: query
	*/
	MinDuration *int64
	/*service name
	  Required: true
	  In: query
	*/
	ServiceName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetTracesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qAnnotationQuery, qhkAnnotationQuery, _ := qs.GetOK("annotationQuery")
	if err := o.bindAnnotationQuery(qAnnotationQuery, qhkAnnotationQuery, route.Formats); err != nil {
		res = append(res, err)
	}

	qEndTs, qhkEndTs, _ := qs.GetOK("endTs")
	if err := o.bindEndTs(qEndTs, qhkEndTs, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qLookback, qhkLookback, _ := qs.GetOK("lookback")
	if err := o.bindLookback(qLookback, qhkLookback, route.Formats); err != nil {
		res = append(res, err)
	}

	qMaxDuration, qhkMaxDuration, _ := qs.GetOK("maxDuration")
	if err := o.bindMaxDuration(qMaxDuration, qhkMaxDuration, route.Formats); err != nil {
		res = append(res, err)
	}

	qMinDuration, qhkMinDuration, _ := qs.GetOK("minDuration")
	if err := o.bindMinDuration(qMinDuration, qhkMinDuration, route.Formats); err != nil {
		res = append(res, err)
	}

	qServiceName, qhkServiceName, _ := qs.GetOK("serviceName")
	if err := o.bindServiceName(qServiceName, qhkServiceName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTracesParams) bindAnnotationQuery(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AnnotationQuery = &raw

	return nil
}

func (o *GetTracesParams) bindEndTs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.EndTs = &raw

	return nil
}

func (o *GetTracesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var limitDefault int64 = int64(10)
		o.Limit = &limitDefault
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

func (o *GetTracesParams) bindLookback(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Lookback = &raw

	return nil
}

func (o *GetTracesParams) bindMaxDuration(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("maxDuration", "query", "int64", raw)
	}
	o.MaxDuration = &value

	return nil
}

func (o *GetTracesParams) bindMinDuration(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("minDuration", "query", "int64", raw)
	}
	o.MinDuration = &value

	return nil
}

func (o *GetTracesParams) bindServiceName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("serviceName", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("serviceName", "query", raw); err != nil {
		return err
	}

	o.ServiceName = raw

	return nil
}
